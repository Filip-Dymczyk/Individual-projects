import tkinter as tk
from typing import Optional


class User:
    def __init__(self) -> None:
        self.__login: Optional[str] = None
        self.__password: Optional[str] = None

    def set_login(self, login: str) -> None:
        self.__login = login

    def set_password(self, password: str) -> None:
        self.__password = password

    def get_login(self) -> str:
        return self.__login

    def get_password(self) -> str:
        return self.__password


class Account:
    def __init__(self) -> None:
        pass


class Interface:
    def __init__(self) -> None:
        # Creating Tk-windows:
        self.__log_in_window: Optional[tk.Tk] = None
        self.__register_window: Optional[tk.Tk] = None
        self.__account_window: Optional[tk.Tk] = None

        # Creating associated user:
        self.__user: User = User()

    # Helper checking password or login viability:
    def __check_viability(self, l_p: str) -> bool:
        return 4 < len(l_p) < 10 and l_p.isalnum()

    # Functions handling buttons hovering:
    def __on_hover(self, event: tk.Event, button_id: int) -> None:
        widget = event.widget
        # Confirm button and registration button:
        if button_id == 1 or button_id == 3:
            widget.config(bg="green")
        # Close button:
        elif button_id == 2:
            widget.config(bg="red")

    def __on_hover_leave(self, event: tk.Event) -> None:
        widget = event.widget
        widget.configure(bg="white")

    # Help functions responsible for handling events generated by pressing Enter on entries:
    def __on_enter_pressed_login(self, event: tk.Event, entry_id: int) -> None:
        entry = event.widget
        login = entry.get()
        # Login entry from log_in:
        if entry_id == 1:
            if self.__check_viability(login):
                entry.config(bg="green")
            else:
                entry.config(bg="red")

    def __on_enter_pressed_password(self, event: tk.Event, entry_id: int) -> None:
        entry = event.widget
        password = entry.get()
        # Password entry from log_in:
        if entry_id == 1:
            if self.__check_viability(password):
                entry.config(bg="green")
            else:
                entry.config(bg="red")

    # Log-in window configuration:
    def __configure_window_log_in(self) -> None:

        # Initializing log_in window:
        self.__log_in_window = tk.Tk()
        self.__log_in_window.title("Log in")

        # Submitting login and password via confirm - initializing User:
        def submit_login_password() -> None:
            login = entry_login.get()
            password = entry_password.get()
            if self.__check_viability(login) and self.__check_viability(password):
                self.__user.set_login(login)
                self.__user.set_password(password)

        # Setting pad on x- and y-axis:
        padx = 5
        pady = 5

        # Labels:
        label1 = tk.Label(self.__log_in_window, text="Login", font=("Calibri 12"))
        label2 = tk.Label(self.__log_in_window, text="Password", font=("Calibri", 12))
        label3 = tk.Label(self.__log_in_window, text="Don't have an account yet?", font=("Calibri 10 underline"))

        # Entry fields to enter login and password:
        entry_login = tk.Entry(self.__log_in_window, width=35)
        entry_password = tk.Entry(self.__log_in_window, show="*", width=35)

        # Binding entry fields to trigger checking data entered in the fields by Enter:
        entry_login.bind("<Return>", lambda event, entry_id=1: self.__on_enter_pressed_login(event, entry_id))
        entry_password.bind("<Return>", lambda event, entry_id=1: self.__on_enter_pressed_password(event, entry_id))

        # Buttons for: registration, data confirmation and closing the window:
        registration_button = tk.Button(self.__log_in_window, text="Click here to register.",
                                        command=self.__open_registration_window, font=("Calibri 10 bold"))
        confirm_button = tk.Button(self.__log_in_window, text="Confirm", command=submit_login_password, font=("Calibri", 10))
        close_button = tk.Button(self.__log_in_window, text="Close", command=lambda button_id=1: self.__terminate(button_id), font=("Calibri", 10))

        # Introducing new events on entering and leaving confirm, close and registration buttons area:
        confirm_button.bind("<Enter>", lambda event, button_id=1: self.__on_hover(event, button_id))
        close_button.bind("<Enter>", lambda event, button_id=2: self.__on_hover(event, button_id))
        registration_button.bind("<Enter>", lambda event, button_id=3: self.__on_hover(event, button_id))

        confirm_button.bind("<Leave>", self.__on_hover_leave)
        close_button.bind("<Leave>", self.__on_hover_leave)
        registration_button.bind("<Leave>", self.__on_hover_leave)

        # Label id's:
        label1.label_id = 1
        label2.label_id = 2
        label3.label_id = 3

        # Entry id's:
        entry_login.entry_id = 1
        entry_password.entry_id = 2


        # Packing created widgets into window:
        label1.pack()
        entry_login.pack(pady=pady)
        label2.pack()
        entry_password.pack(pady=pady)
        confirm_button.pack(pady=3*pady)
        label3.pack(pady=pady)
        registration_button.pack()
        close_button.pack(padx=2*padx, pady=3*pady, side="right")

    def __open_registration_window(self) -> None:

        # Initializing registration window:
        self.__register_window = tk.Tk()
        self.__register_window.title("Registration")

        # Setting pad on x- and y-axis:
        padx = 5
        pady = 5

        # Labels:
        label1 = tk.Label(self.__register_window, text="Login")
        label2 = tk.Label(self.__register_window, text="Password")
        label3 = tk.Label(self.__register_window, text="Enter your password again")
        label4 = tk.Label(self.__register_window, text="Enter your email")

        # Entry fields to enter login and password and email:
        entry_login = tk.Entry(self.__register_window, width=30)
        entry_password = tk.Entry(self.__register_window, show="*", width=30)
        entry_re_password = tk.Entry(self.__register_window, show="*", width=30)
        entry_email = tk.Entry(self.__register_window, width=30)

        # # Binding entry fields to trigger checking data entered in the fields by Enter:
        #entry_login.bind("<Return>", on_enter_pressed_login)
        #entry_password.bind("<Return>", on_enter_pressed_password)

        # Packing:
        label1.pack(pady=pady)
        entry_login.pack(pady=pady)
        label2.pack(pady=pady)
        entry_password.pack(pady=pady)
        label3.pack(pady=pady)
        entry_re_password.pack(pady=pady)
        label4.pack(pady=pady)
        entry_email.pack(pady=pady)


    def get_user_login(self) -> str:
        return self.__user.get_login()

    def activate(self) -> None:
        self.__configure_window_log_in()
        self.__log_in_window.mainloop()

    def __terminate(self, close_button_nr: int) -> None:
        # Close button from log_in:
        if close_button_nr == 1:
            self.__log_in_window.destroy()
