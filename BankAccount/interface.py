from typing import Optional
from user_db_account import User, DataBase, Account
import tkinter as tk
from tkinter import ttk


# Interface handling all the windows appearing throughout the program:
class Interface:
    def __init__(self) -> None:
        # Creating Tk-windows:
        self.__log_in_window: Optional[tk.Tk] = None
        self.__register_window: Optional[tk.Tk] = None
        self.__account_window: Optional[tk.Tk] = None
        self.__info_window: Optional[tk.Tk] = None

        # Creating DataBase object to handle flow of information:
        self.__data_base: DataBase = DataBase()

        # Creating associated user:
        self.__user: User = User()

    # Helper checking password or login viability:
    def __check_viability(self, l_p: str) -> bool:
        return 4 < len(l_p) < 10 and l_p.isalnum()

    # Functions handling buttons hovering:
    def __on_hover(self, event: tk.Event, button_id: int) -> None:
        widget = event.widget
        # Confirm button and registration button form log-in, confirm and from registration:
        if button_id in [1, 2, 4]:
            widget.config(bg="green")
        # Return button from registration:
        elif button_id in [5, 8]:
            widget.config(bg="yellow")
        # Close button:
        elif button_id in [3, 6, 7]:
            widget.config(bg="red")

    def __on_hover_leave(self, event: tk.Event) -> None:
        widget = event.widget
        widget.configure(bg="white")

    # Help functions responsible for handling events generated by pressing Enter on entries:
    def __on_enter_pressed_login(self, event: tk.Event) -> None:
        entry = event.widget
        login = entry.get()
        # Login entries:
        if self.__check_viability(login):
            entry.config(bg="green")
        else:
            entry.config(bg="red")

    def __on_enter_pressed_password(self, event: tk.Event) -> None:
        entry = event.widget
        password = entry.get()
        # Password entries:
        if self.__check_viability(password):
            entry.config(bg="green")
        else:
            entry.config(bg="red")

    # Log-in window configuration:
    def __configure_window_log_in(self) -> None:

        # Initializing log_in window:
        self.__log_in_window = tk.Tk()
        self.__log_in_window.title("Log in")

        # Toggling red cross in the top right corner to terminating the app:
        self.__log_in_window.protocol("WM_DELETE_WINDOW", self.__close_all_cross)

        # Setting fixed window position:
        self.__log_in_window.geometry("+850+375")

        # Submitting login and password via confirm - initializing User:
        def submit_login_password() -> None:
            login = entry_login.get()
            password = entry_password.get()

            # If login and password are viable and they are in data_base related to each-other then the login is successful:
            if self.__check_viability(login) and self.__check_viability(password) and \
                    self.__data_base.check_login_in_file(login) and \
                    self.__data_base.check_login_password(login, password):

                self.__user.set_login(login)
                self.__user.set_password(password)

                # Add: getting account balance for data_base and setting users Account with it:

                # Move to another window:
                self.__account_management_window()
            else:
                # Pop another window:
                self.__incorrect_login_window()

        # Setting pad on x- and y-axis:
        padx = 5
        pady = 5

        # Labels:
        label1 = tk.Label(self.__log_in_window, text="Login", font="Calibri 12")
        label2 = tk.Label(self.__log_in_window, text="Password", font="Calibri 12")
        label3 = tk.Label(self.__log_in_window, text="Don't have an account yet?", font="Calibri 10 underline")

        # Entry fields to enter login and password:
        entry_login = tk.Entry(self.__log_in_window, width=35)
        entry_password = tk.Entry(self.__log_in_window, show="*", width=35)

        # Binding entry fields to trigger checking data entered in the fields by Enter:
        entry_login.bind("<Return>", self.__on_enter_pressed_login)
        entry_password.bind("<Return>", self.__on_enter_pressed_password)

        # Buttons for: registration, data confirmation and closing the window:
        registration_button = tk.Button(self.__log_in_window, text="Click here to register",
                                        command=lambda return_button_id=1: self.__return_to_register(return_button_id), font="Calibri 10 bold")
        confirm_button = tk.Button(self.__log_in_window, text="Confirm", command=submit_login_password,
                                   font="Calibri 10")
        leave_button = tk.Button(self.__log_in_window, text="Leave",
                                 command=lambda leave_button_id=1: self.__terminate(leave_button_id), font="Calibri 10")

        # Introducing new events on entering and leaving confirm, close and registration buttons area:
        confirm_button.bind("<Enter>", lambda event, button_id=1: self.__on_hover(event, button_id))
        registration_button.bind("<Enter>", lambda event, button_id=2: self.__on_hover(event, button_id))
        leave_button.bind("<Enter>", lambda event, button_id=3: self.__on_hover(event, button_id))

        confirm_button.bind("<Leave>", self.__on_hover_leave)
        leave_button.bind("<Leave>", self.__on_hover_leave)
        registration_button.bind("<Leave>", self.__on_hover_leave)

        # Packing created widgets into window:
        label1.pack()
        entry_login.pack(pady=pady, padx=padx)
        label2.pack()
        entry_password.pack(pady=pady, padx=padx)
        confirm_button.pack(pady=3 * pady)
        label3.pack(pady=pady)
        registration_button.pack()
        leave_button.pack(padx=2 * padx, pady=3 * pady, side="right")

    # Registration window:
    def __open_registration_window(self) -> None:

        # Handling enter pressed on re-password:
        def on_enter_pressed_re_password(event: tk.Event) -> None:
            widget = event.widget
            re_password = widget.get()
            if self.__check_viability(re_password) and re_password == entry_password.get():
                widget.configure(bg="green")
            else:
                widget.configure(bg="red")

        def create_an_account() -> None:

            # Get all entries from window:
            login = entry_login.get()
            password = entry_password.get()
            re_password = entry_re_password.get()

            if self.__check_viability(login) and self.__check_viability(password) and self.__check_viability(
                    re_password):
                # Check password identity:
                if password == re_password:
                    # Update the DataBase - enter new client data:

                    # Go through transition window:
                    self.__transition_window_account_created()

        # Initializing registration window:
        self.__register_window = tk.Tk()
        self.__register_window.title("Registration")

        # Setting fixed window position:
        self.__register_window.geometry("+850+375")

        # Toggling red cross in the top right corner to terminating the app:
        self.__register_window.protocol("WM_DELETE_WINDOW", self.__close_all_cross)

        # Setting pad on x- and y-axis:
        padx = 25
        pady = 5

        # Labels:
        label1 = tk.Label(self.__register_window, text="Login", font="Calibri 12")
        label2 = tk.Label(self.__register_window, text="Password", font="Calibri 12")
        label3 = tk.Label(self.__register_window, text="Enter your password again", font="Calibri 12")
        # label4 = tk.Label(self.__register_window, text="Enter your email", font="Calibri 12")

        # Entry fields to enter login and password and email:
        entry_login = tk.Entry(self.__register_window, width=30)
        entry_password = tk.Entry(self.__register_window, show="*", width=30)
        entry_re_password = tk.Entry(self.__register_window, show="*", width=30)
        # entry_email = tk.Entry(self.__register_window, width=30)

        # Binding fields on enter trigger:
        entry_login.bind("<Return>", self.__on_enter_pressed_login)
        entry_password.bind("<Return>", self.__on_enter_pressed_password)
        entry_re_password.bind("<Return>", on_enter_pressed_re_password)

        # Confirm, close, return to log_in buttons:
        confirm_button = tk.Button(self.__register_window, text="Confirm", font="Calibri 10", command=create_an_account)
        return_button = tk.Button(self.__register_window, text="Return to log-in", font="Calibri 10",
                                  command=lambda return_button_id=1: self.__return_to_log_in(return_button_id))

        # On hover:
        confirm_button.bind("<Enter>", lambda event, button_id=4: self.__on_hover(event, button_id))
        return_button.bind("<Enter>", lambda event, button_id=5: self.__on_hover(event, button_id))

        confirm_button.bind("<Leave>", self.__on_hover_leave)
        return_button.bind("<Leave>", self.__on_hover_leave)

        # Packing:
        label1.pack()
        entry_login.pack(pady=2 * pady, padx=padx)
        label2.pack()
        entry_password.pack(pady=2 * pady, padx=padx)
        label3.pack()
        entry_re_password.pack(pady=2 * pady, padx=padx)
        # label4.pack()
        # entry_email.pack(pady=2*pady)
        confirm_button.pack(pady=3 * pady)
        return_button.pack(side="bottom", pady=pady)

    # Window popping after wrong login data have been confirmed:
    def __incorrect_login_window(self) -> None:
        # Withdrawing log-in window:
        if self.__log_in_window:
            self.__log_in_window.withdraw()

        self.__info_window = tk.Tk()
        self.__info_window.title("Incorrect login or password!")
        self.__info_window.protocol("WM_DELETE_WINDOW", self.__close_all_cross)
        self.__info_window.geometry("350x80+850+400")

        #label1 = tk.Label(self.__info_window, text="Enter correct login or password!", font="Calibri 12 bold")

        close_button = tk.Button(self.__info_window, text="Try to log-in again.", font="Calibri 10",
                                 command=lambda return_button_id=2: self.__return_to_log_in(return_button_id))
        register_button = tk.Button(self.__info_window, text="Don't have an account yet? Sign in!", font="Calibri 10 underline",
                                    command=lambda return_button_id=2: self.__return_to_register(return_button_id))

        close_button.bind("<Enter>", lambda event, close_button_id=7: self.__on_hover(event, close_button_id))
        close_button.bind("<Leave>", self.__on_hover_leave)
        register_button.bind("<Enter>", lambda event, registration_button_id=8: self.__on_hover(event, registration_button_id))
        register_button.bind("<Leave>", self.__on_hover_leave)

        #label1.pack(padx=5, pady=5)
        register_button.pack(padx=5, pady=10, fill="both")
        close_button.pack(padx=5, pady=5, fill="both")


    # Little window informing about positive account creation:
    def __transition_window_account_created(self) -> None:
        pass

    def __account_management_window(self) -> None:
        pass

    # Getting user login - for test:
    def get_user_login(self) -> str:
        return self.__user.get_login()

    # Returning to login window:
    def __return_to_log_in(self, return_button_id: int) -> None:
        # Return to log-in from registration:
        if return_button_id == 1:
            self.__register_window.destroy()
            self.__register_window = None
        # Return to log-in from info-window:
        elif return_button_id == 2:
            self.__info_window.destroy()
            self.__info_window = None
        # Re-withdrawing log-in window:
        self.__log_in_window.deiconify()

    def __return_to_register(self, return_button_id: int) -> None:
        # Returning from log-in window:
        if return_button_id == 1:
            self.__log_in_window.withdraw()
        # Returning from info window:
        elif return_button_id == 2:
            self.__info_window.destroy()
        self.__open_registration_window()


    # Terminating the whole program:
    def __terminate(self, close_button_nr: int) -> None:
        # Close button from log_in:
        if close_button_nr == 1:
            if self.__register_window is not None:
                self.__register_window.destroy()
                self.__register_window = None
            self.__log_in_window.quit()

    # Closing the app with the use of a red cross:
    def __close_all_cross(self) -> None:
        self.__log_in_window.quit()

    # Activating program:
    def activate(self) -> None:
        self.__configure_window_log_in()
        self.__log_in_window.mainloop()